# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_eapy', [dirname(__file__)])
        except ImportError:
            import _eapy
            return _eapy
        if fp is not None:
            try:
                _mod = imp.load_module('_eapy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _eapy = swig_import_helper()
    del swig_import_helper
else:
    import _eapy
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _eapy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _eapy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _eapy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _eapy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _eapy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _eapy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _eapy.SwigPyIterator_copy(self)

    def next(self):
        return _eapy.SwigPyIterator_next(self)

    def __next__(self):
        return _eapy.SwigPyIterator___next__(self)

    def previous(self):
        return _eapy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _eapy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _eapy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _eapy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _eapy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _eapy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _eapy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _eapy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _eapy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_eapy.SHARED_PTR_DISOWN_swigconstant(_eapy)
SHARED_PTR_DISOWN = _eapy.SHARED_PTR_DISOWN
class StringSeq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSeq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSeq, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _eapy.StringSeq_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _eapy.StringSeq___nonzero__(self)

    def __bool__(self):
        return _eapy.StringSeq___bool__(self)

    def __len__(self):
        return _eapy.StringSeq___len__(self)

    def pop(self):
        return _eapy.StringSeq_pop(self)

    def __getslice__(self, i, j):
        return _eapy.StringSeq___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _eapy.StringSeq___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _eapy.StringSeq___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _eapy.StringSeq___delitem__(self, *args)

    def __getitem__(self, *args):
        return _eapy.StringSeq___getitem__(self, *args)

    def __setitem__(self, *args):
        return _eapy.StringSeq___setitem__(self, *args)

    def append(self, x):
        return _eapy.StringSeq_append(self, x)

    def empty(self):
        return _eapy.StringSeq_empty(self)

    def size(self):
        return _eapy.StringSeq_size(self)

    def clear(self):
        return _eapy.StringSeq_clear(self)

    def swap(self, v):
        return _eapy.StringSeq_swap(self, v)

    def get_allocator(self):
        return _eapy.StringSeq_get_allocator(self)

    def begin(self):
        return _eapy.StringSeq_begin(self)

    def end(self):
        return _eapy.StringSeq_end(self)

    def rbegin(self):
        return _eapy.StringSeq_rbegin(self)

    def rend(self):
        return _eapy.StringSeq_rend(self)

    def pop_back(self):
        return _eapy.StringSeq_pop_back(self)

    def erase(self, *args):
        return _eapy.StringSeq_erase(self, *args)

    def __init__(self, *args):
        this = _eapy.new_StringSeq(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _eapy.StringSeq_push_back(self, x)

    def front(self):
        return _eapy.StringSeq_front(self)

    def back(self):
        return _eapy.StringSeq_back(self)

    def assign(self, n, x):
        return _eapy.StringSeq_assign(self, n, x)

    def resize(self, *args):
        return _eapy.StringSeq_resize(self, *args)

    def insert(self, *args):
        return _eapy.StringSeq_insert(self, *args)

    def reserve(self, n):
        return _eapy.StringSeq_reserve(self, n)

    def capacity(self):
        return _eapy.StringSeq_capacity(self)
    __swig_destroy__ = _eapy.delete_StringSeq
    __del__ = lambda self: None
StringSeq_swigregister = _eapy.StringSeq_swigregister
StringSeq_swigregister(StringSeq)

class DocumentSeq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DocumentSeq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DocumentSeq, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _eapy.DocumentSeq_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _eapy.DocumentSeq___nonzero__(self)

    def __bool__(self):
        return _eapy.DocumentSeq___bool__(self)

    def __len__(self):
        return _eapy.DocumentSeq___len__(self)

    def pop(self):
        return _eapy.DocumentSeq_pop(self)

    def __getslice__(self, i, j):
        return _eapy.DocumentSeq___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _eapy.DocumentSeq___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _eapy.DocumentSeq___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _eapy.DocumentSeq___delitem__(self, *args)

    def __getitem__(self, *args):
        return _eapy.DocumentSeq___getitem__(self, *args)

    def __setitem__(self, *args):
        return _eapy.DocumentSeq___setitem__(self, *args)

    def append(self, x):
        return _eapy.DocumentSeq_append(self, x)

    def empty(self):
        return _eapy.DocumentSeq_empty(self)

    def size(self):
        return _eapy.DocumentSeq_size(self)

    def clear(self):
        return _eapy.DocumentSeq_clear(self)

    def swap(self, v):
        return _eapy.DocumentSeq_swap(self, v)

    def get_allocator(self):
        return _eapy.DocumentSeq_get_allocator(self)

    def begin(self):
        return _eapy.DocumentSeq_begin(self)

    def end(self):
        return _eapy.DocumentSeq_end(self)

    def rbegin(self):
        return _eapy.DocumentSeq_rbegin(self)

    def rend(self):
        return _eapy.DocumentSeq_rend(self)

    def pop_back(self):
        return _eapy.DocumentSeq_pop_back(self)

    def erase(self, *args):
        return _eapy.DocumentSeq_erase(self, *args)

    def __init__(self, *args):
        this = _eapy.new_DocumentSeq(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _eapy.DocumentSeq_push_back(self, x)

    def front(self):
        return _eapy.DocumentSeq_front(self)

    def back(self):
        return _eapy.DocumentSeq_back(self)

    def assign(self, n, x):
        return _eapy.DocumentSeq_assign(self, n, x)

    def resize(self, *args):
        return _eapy.DocumentSeq_resize(self, *args)

    def insert(self, *args):
        return _eapy.DocumentSeq_insert(self, *args)

    def reserve(self, n):
        return _eapy.DocumentSeq_reserve(self, n)

    def capacity(self):
        return _eapy.DocumentSeq_capacity(self)
    __swig_destroy__ = _eapy.delete_DocumentSeq
    __del__ = lambda self: None
DocumentSeq_swigregister = _eapy.DocumentSeq_swigregister
DocumentSeq_swigregister(DocumentSeq)


_eapy.NO_TYPE_swigconstant(_eapy)
NO_TYPE = _eapy.NO_TYPE

_eapy.BOOL_TYPE_swigconstant(_eapy)
BOOL_TYPE = _eapy.BOOL_TYPE

_eapy.BYTE_TYPE_swigconstant(_eapy)
BYTE_TYPE = _eapy.BYTE_TYPE

_eapy.UBYTE_TYPE_swigconstant(_eapy)
UBYTE_TYPE = _eapy.UBYTE_TYPE

_eapy.SHORT_TYPE_swigconstant(_eapy)
SHORT_TYPE = _eapy.SHORT_TYPE

_eapy.USHORT_TYPE_swigconstant(_eapy)
USHORT_TYPE = _eapy.USHORT_TYPE

_eapy.INT_TYPE_swigconstant(_eapy)
INT_TYPE = _eapy.INT_TYPE

_eapy.UINT_TYPE_swigconstant(_eapy)
UINT_TYPE = _eapy.UINT_TYPE

_eapy.LONG_TYPE_swigconstant(_eapy)
LONG_TYPE = _eapy.LONG_TYPE

_eapy.ULONG_TYPE_swigconstant(_eapy)
ULONG_TYPE = _eapy.ULONG_TYPE

_eapy.FLOAT_TYPE_swigconstant(_eapy)
FLOAT_TYPE = _eapy.FLOAT_TYPE

_eapy.DOUBLE_TYPE_swigconstant(_eapy)
DOUBLE_TYPE = _eapy.DOUBLE_TYPE

_eapy.STRING_TYPE_swigconstant(_eapy)
STRING_TYPE = _eapy.STRING_TYPE

_eapy.ARRAY_TYPE_swigconstant(_eapy)
ARRAY_TYPE = _eapy.ARRAY_TYPE

_eapy.SEQUENCE_TYPE_swigconstant(_eapy)
SEQUENCE_TYPE = _eapy.SEQUENCE_TYPE

_eapy.DOC_TYPE_swigconstant(_eapy)
DOC_TYPE = _eapy.DOC_TYPE

_eapy.DICT_TYPE_swigconstant(_eapy)
DICT_TYPE = _eapy.DICT_TYPE

_eapy.DATETIME_TYPE_swigconstant(_eapy)
DATETIME_TYPE = _eapy.DATETIME_TYPE
class Session(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Session, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Session, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["createSession"] = lambda x: _eapy.Session_createSession
    if _newclass:
        createSession = staticmethod(_eapy.Session_createSession)

    def open(self, chName, timeout):
        return _eapy.Session_open(self, chName, timeout)

    def createProxy(self, ns):
        return _eapy.Session_createProxy(self, ns)

    def close(self):
        return _eapy.Session_close(self)
    __swig_destroy__ = _eapy.delete_Session
    __del__ = lambda self: None
Session_swigregister = _eapy.Session_swigregister
Session_swigregister(Session)

def Session_createSession():
    return _eapy.Session_createSession()
Session_createSession = _eapy.Session_createSession


def import_datetime():
    return _eapy.import_datetime()
import_datetime = _eapy.import_datetime
class Document(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Document, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Document, name)
    __repr__ = _swig_repr

    def __init__(self, adaptee):
        this = _eapy.new_Document(adaptee)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_tk(self, key):
        return _eapy.Document_get_tk(self, key)

    def get_boolean(self, key):
        return _eapy.Document_get_boolean(self, key)

    def get_byte(self, key):
        return _eapy.Document_get_byte(self, key)

    def get_short(self, key):
        return _eapy.Document_get_short(self, key)

    def get_int(self, key):
        return _eapy.Document_get_int(self, key)

    def get_long(self, key):
        return _eapy.Document_get_long(self, key)

    def get_ubyte(self, key):
        return _eapy.Document_get_ubyte(self, key)

    def get_ushort(self, key):
        return _eapy.Document_get_ushort(self, key)

    def get_uint(self, key):
        return _eapy.Document_get_uint(self, key)

    def get_ulong(self, key):
        return _eapy.Document_get_ulong(self, key)

    def get_float(self, key):
        return _eapy.Document_get_float(self, key)

    def get_double(self, key):
        return _eapy.Document_get_double(self, key)

    def get_string(self, key):
        return _eapy.Document_get_string(self, key)

    def get_doc(self, key):
        return _eapy.Document_get_doc(self, key)

    def datetime(self, *args):
        return _eapy.Document_datetime(self, *args)

    def ndarray(self, key):
        return _eapy.Document_ndarray(self, key)

    def strings(self, key):
        return _eapy.Document_strings(self, key)

    def docs(self, key):
        return _eapy.Document_docs(self, key)

    def datetimes(self, secKey, nanoKey):
        return _eapy.Document_datetimes(self, secKey, nanoKey)

    def get_type_error(self, key):
        return _eapy.Document_get_type_error(self, key)
    __swig_destroy__ = _eapy.delete_Document
    __del__ = lambda self: None
Document_swigregister = _eapy.Document_swigregister
Document_swigregister(Document)

class Collection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Collection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Collection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def filter(self, query):
        return _eapy.Collection_filter(self, query)

    def read(self, query):
        return _eapy.Collection_read(self, query)

    def cache(self, timeout):
        return _eapy.Collection_cache(self, timeout)

    def collect(self, timeout):
        return _eapy.Collection_collect(self, timeout)
    __swig_destroy__ = _eapy.delete_Collection
    __del__ = lambda self: None
Collection_swigregister = _eapy.Collection_swigregister
Collection_swigregister(Collection)

def _DocumentGetItem(self,key):
  tk = self.get_tk(key)
  result =  {
    _eapy.NO_TYPE      : self.get_type_error,
    _eapy.BOOL_TYPE    : self.get_boolean,
    _eapy.BYTE_TYPE    : self.get_byte,
    _eapy.SHORT_TYPE   : self.get_short,
    _eapy.INT_TYPE     : self.get_int,
    _eapy.LONG_TYPE    : self.get_long,
    _eapy.UBYTE_TYPE   : self.get_ubyte,
    _eapy.UINT_TYPE    : self.get_uint,
    _eapy.ULONG_TYPE   : self.get_ulong,
    _eapy.FLOAT_TYPE   : self.get_float,
    _eapy.DOUBLE_TYPE  : self.get_double,
    _eapy.STRING_TYPE  : self.get_string,
    _eapy.DOC_TYPE     : self.get_doc
  }[tk](key)
  return result
Document.__getitem__ = _DocumentGetItem

# This file is compatible with both classic and new-style classes.


